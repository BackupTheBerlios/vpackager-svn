' Gambas module file

'    This file is part of vpackager

'    vpackager is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 3 of the License, or
'    (at your option) any later version.

'    vpackager  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vpackager.  If not, see <http://www.gnu.org/licenses/>.


PUBLIC FUNCTION Write_Script(sBuildType AS String)
DIM sApp AS String
DIM sVersion AS String
DIM sArch AS String
DIM sBuild AS String
DIM sTag AS String
DIM sFormat AS String
DIM sConfigOptions AS String
DIM sCflags AS String
DIM sBuildScript AS String

sApp = Global.sApp
sVersion = global.sVer
sBuild = global.sPkgBuild
sArch = global.sPkgArch
stag = global.spkgTag
sFormat = global.sPkgType
sConfigOptions = global.sBuildConfigString
sCflags = global.sBuildCFLAGS

sBuildScript = "#!/bin/bash " & gb.NewLine & gb.NewLine &
"#    ------------------------------------------ " & gb.NewLine &
"#    This build script was auto generated by " & global.sMyname & "-" & global.sMyVer & " for " & sApp & gb.newline &
"#    ------------------------------------------- " & gb.NewLine & gb.NewLine &
"# Set variables" & gb.NewLine &
"TMP=" & global.TMP_DIR & gb.NewLine &
"NAME=" & sApp & gb.NewLine &
"VERSION=" & sVersion & gb.NewLine &
"RELEASE=" & sBuild & stag & gb.NewLine &
"ARCH=" & sArch & gb.NewLine &
"PKG=$TMP/package-" & sApp & gb.NewLine & gb.NewLine &
"# Begin building" & gb.NewLine & gb.NewLine &
"cd $TMP" & gb.NewLine &
"tar xfv " & global.sFullSourcePath & gb.NewLine &
"cd $NAME-$VERSION" & gb.NewLine &
"mkdir build && cd build" & gb.NewLine &
"mkdir -p $PKG" & gb.NewLine


' THIS IS FOR NORMAL SOURCES
IF sBuildType = "normal" THEN 
sBuildScript = sBuildScript &
"sh ../configure " & sConfigOptions & " CFLAGS=\'" & sCflags & "\' || exit 1" & gb.NewLine &
"make || exit 1 " & gb.NewLine & 
"make DESTDIR=$PKG install" & gb.NewLine
ELSE IF sBuildType = "python" THEN 
sBuildScript = sBuildScript & gb.NewLine &
"mkdir -p $PKG/" & ConfigOptions.sInstallPrefix & gb.NewLine &
"python ../setup.py install --prefix=" & ConfigOptions.sInstallPrefix & " || exit 1" & gb.NewLine
ELSE IF sBuildType = "CMake" THEN 
sBuildScript = sBuildScript & gb.NewLin &
"cmake " & global.CMAKE_CONFIGURE_STRING & " .. || exit 1" & gb.NewLine &
"make || exit 1" & gb.NewLine &
"make DESTDIR=$PKG install" & gb.NewLine
END IF
' THIS IS THE SAME FOR ALL BUILD TYPES
' SHOULD PROBABBLY INSERT SLACK-DESC AT THIS POINT
sBuildScript = sBuildScript & gb.NewLine &
"( cd $PKG " & gb.NewLine &
  "find . | xargs file | grep \'executable\' | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null" & gb.newline &
  "find . | xargs file | grep \'shared object\' | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null" & gb.NewLine &
")" & gb.NewLine &
"# Package Documentation" & gb.NewLine &
"(cd $PKG" & gb.NewLine &
  "find . -name perllocal.pod | xargs rm -f" & gb.NewLine &
")" & gb.NewLine &
gb.NewLine &
"mkdir -p $PKG/usr/doc/$NAME-$VERSION" & gb.NewLine &
"cp -a AUTHORS COPYING INSTALL NEWS README TODO docs $PKG/usr/doc/$NAME-$VERSION" & gb.NewLine &
"rm -f $PKG/usr/doc/$NAME-$VERSION/docs/Make* $PKG/usr/doc/$NAME-$VERSION/docs/*.1" & gb.NewLine &
"gzip -f -9 $PKG/usr/man/man?/*.?" & gb.NewLine & gb.NewLine
IF global.sDesc_File_Path THEN 
sBuildScript = sBuildScript &
"mkdir -p $PKG/install" & gb.NewLine &
"cat " & global.sDesc_File_Path & " > $PKG/install/slack-desc" & gb.NewLine
END IF
sBuildScript = sBuildScript & gb.NewLine &
"cd $PKG && makeslapt --" & sFormat & " $NAME-$VERSION-$ARCH-$RELEASE." & sFormat & gb.NewLine &
"exit 0"

  
  ' SAVE THE SCRIPT TO A FILE
  'IF dialog.SaveFile() THEN RETURN 
  file.Save(file.Dir(global.sFullSourcePath) &/ global.sAPP & ".build", sBuildScript)
END

